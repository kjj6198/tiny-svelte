// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse <div><p></p></div> 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": "",
      "end": 10,
      "name": "div",
      "selfClosing": false,
      "start": 0,
      "type": "Element",
    },
  ],
  "data": "",
  "end": 11,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse match self closing in children 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [
        Object {
          "name": "data-toggle",
          "type": "Attribute",
          "value": "true",
        },
        Object {
          "name": "class",
          "type": "Attribute",
          "value": "hello",
        },
      ],
      "children": Array [
        Node {
          "attrs": Array [],
          "children": Array [],
          "data": "
    ",
          "end": 43,
          "name": "",
          "selfClosing": false,
          "start": 38,
          "type": "Text",
        },
        Node {
          "attrs": Array [],
          "children": Array [
            Node {
              "attrs": Array [],
              "children": Array [],
              "data": "Hello World",
              "end": 57,
              "name": "",
              "selfClosing": false,
              "start": 46,
              "type": "Text",
            },
          ],
          "data": "",
          "end": 60,
          "name": "p",
          "selfClosing": false,
          "start": 43,
          "type": "Element",
        },
        Node {
          "attrs": Array [
            Object {
              "name": "src",
              "type": "Attribute",
              "value": "self closing",
            },
          ],
          "children": Array [],
          "data": "",
          "end": 94,
          "name": "video",
          "selfClosing": true,
          "start": 66,
          "type": "Element",
        },
        Node {
          "attrs": Array [],
          "children": Array [],
          "data": "
  ",
          "end": 97,
          "name": "",
          "selfClosing": false,
          "start": 94,
          "type": "Text",
        },
      ],
      "data": "",
      "end": 102,
      "name": "div",
      "selfClosing": false,
      "start": 0,
      "type": "Element",
    },
  ],
  "data": "",
  "end": 106,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse match self closing: self closing 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": "",
      "end": 9,
      "name": "video",
      "selfClosing": true,
      "start": 0,
      "type": "Element",
    },
  ],
  "data": "",
  "end": 9,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse match text <div class="class"><p>Hello World</p></div>: attribute 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [
        Object {
          "name": "class",
          "type": "Attribute",
          "value": "class",
        },
      ],
      "children": Array [
        Node {
          "attrs": Array [],
          "children": Array [
            Node {
              "attrs": Array [],
              "children": Array [],
              "data": "Hello World",
              "end": 33,
              "name": "",
              "selfClosing": false,
              "start": 22,
              "type": "Text",
            },
          ],
          "data": "",
          "end": 36,
          "name": "p",
          "selfClosing": false,
          "start": 19,
          "type": "Element",
        },
      ],
      "data": "",
      "end": 42,
      "name": "div",
      "selfClosing": false,
      "start": 0,
      "type": "Element",
    },
  ],
  "data": "",
  "end": 43,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse match text <div><p>Hello World</p></div> 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [
        Node {
          "attrs": Array [],
          "children": Array [
            Node {
              "attrs": Array [],
              "children": Array [],
              "data": "Hello World",
              "end": 19,
              "name": "",
              "selfClosing": false,
              "start": 8,
              "type": "Text",
            },
          ],
          "data": "",
          "end": 22,
          "name": "p",
          "selfClosing": false,
          "start": 5,
          "type": "Element",
        },
      ],
      "data": "",
      "end": 28,
      "name": "div",
      "selfClosing": false,
      "start": 0,
      "type": "Element",
    },
  ],
  "data": "",
  "end": 29,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse pure text should be valid 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": "Hello World",
      "end": 11,
      "name": "",
      "selfClosing": false,
      "start": 0,
      "type": "Text",
    },
  ],
  "data": "",
  "end": 11,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse should match each block 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": Object {
        "local": "item",
        "variable": "arr",
      },
      "end": 26,
      "name": "",
      "selfClosing": false,
      "start": 2,
      "type": "EachBlock",
    },
  ],
  "data": "",
  "end": 26,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse should match each block 2`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": Object {
        "index": "i",
        "local": "item",
        "variable": "arr",
      },
      "end": 29,
      "name": "",
      "selfClosing": false,
      "start": 2,
      "type": "EachBlock",
    },
  ],
  "data": "",
  "end": 29,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse should match if block 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Node {
      "attrs": Array [],
      "children": Array [],
      "data": Object {
        "condition": "var",
      },
      "end": 14,
      "name": "",
      "selfClosing": false,
      "start": 2,
      "type": "IfBlock",
    },
  ],
  "data": "",
  "end": 14,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse should parse {a} 1`] = `
Node {
  "attrs": Array [],
  "children": Array [
    Object {
      "end": 3,
      "name": "a",
      "start": 1,
      "type": "MustacheTag",
    },
  ],
  "data": "",
  "end": 3,
  "name": "",
  "selfClosing": false,
  "start": 0,
  "type": "Fragment",
}
`;

exports[`parse should parse inside <script></script> 1`] = `
Node {
  "body": Array [
    Node {
      "end": 16,
      "expression": Node {
        "arguments": Array [
          Node {
            "end": 15,
            "raw": "'a'",
            "start": 12,
            "type": "Literal",
            "value": "a",
          },
        ],
        "callee": Node {
          "computed": false,
          "end": 11,
          "object": Node {
            "end": 7,
            "name": "console",
            "start": 0,
            "type": "Identifier",
          },
          "property": Node {
            "end": 11,
            "name": "log",
            "start": 8,
            "type": "Identifier",
          },
          "start": 0,
          "type": "MemberExpression",
        },
        "end": 16,
        "start": 0,
        "type": "CallExpression",
      },
      "start": 0,
      "type": "ExpressionStatement",
    },
  ],
  "end": 16,
  "sourceType": "script",
  "start": 0,
  "type": "Program",
}
`;
